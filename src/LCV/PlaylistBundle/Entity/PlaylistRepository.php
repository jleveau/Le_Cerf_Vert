<?php

namespace LCV\PlaylistBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * PlaylistRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlaylistRepository extends EntityRepository {
    
    public function titleAvailable($playlist_id,$title){
        $query = $this->createQueryBuilder('playlist')
            ->where('playlist.id = :playlist_id')
            ->leftJoin('playlist.playlist_audios','playlist_audio')
            ->andWhere('playlist_audio.title = :title')
            ->setParameters(array('title' => $title, 'playlist_id' => $playlist_id))
            ->getQuery();
         ;
         return empty($query->getResult());
    }
    
    public function getUserPlaylist($user){
        $query = $this->createQueryBuilder('playlist')
        ->where('playlist.author = :user')
        ->setParameter('user', $user->getId())
        ->getQuery();
        
        return $query->getResult();
    }
    
    public function getLastPlaylists($limite) {
        $qb = $this -> createQueryBuilder('p') 
            -> orderBy('p.date', 'DESC') 
            -> setMaxResults($limite);

        return $qb -> getQuery() -> getResult();
    }

    public function getOneByIdInOrder($id) {
        $qb = $this -> createQueryBuilder('p')
            -> where('p.id = :id') 
            ->setParameter('id', $id)
            ->leftJoin('p.playlist_audios','a')
            ->addSelect('a')
            ->orderBy('a.sortOrder', 'ASC') ;
        return $qb -> getQuery() -> getResult()[0];
    }
    
    public function getPlaylistsWithCategory(){
        $query = $this->createQueryBuilder('p')
        ->leftJoin('p.category','c')
        ->addSelect('c')
   //     ->leftJoin('p.rate','r')
   //     ->addSelect('r')
        ->orderBy('c.name','ASC')
        ->getQuery();
    
        return $query->getResult();
    }
    
    public function getPlaylistVoteUser($playlist_id,$user){
        $query = $this->createQueryBuilder('playlist')
        ->where('playlist.id = :playlist_id')
        ->leftJoin('playlist.rate','rate')
        ->addSelect('rate')
        ->leftJoin('rate.votes','vote')
        ->andWhere('vote.voter = :user')
        ->setParameters(array('user' => $user, 'playlist_id' => $playlist_id))
        ->getQuery();
        
        return $query->getResult();
    }
}
